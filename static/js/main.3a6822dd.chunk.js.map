{"version":3,"sources":["components/item.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["Item","className","style","height","this","props","value","React","PureComponent","List","onScroll","evt","scrollTop","target","viewportHeight","viewport","offsetHeight","rowsCount","list","length","getVisibleBoundaries","visibleStartIndex","visibleEndIndex","overscanStartIndex","getOverscanStartIdx","overscanEndIndex","getOverscanEndIdx","setState","renderedRowsCount","Math","ceil","max","round","min","floor","getRenderRows","state","i","renderRows","push","Array","from","map","item","index","startOffset","endOffset","ref","paddingTop","paddingBottom","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a6822dd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Item extends React.PureComponent {\n\n  render() {\n    return (\n      <div className=\"item\" style={{height: this.props.height}}>{this.props.value}</div>\n    );\n  }\n}\n\nexport default Item;","import React from 'react';\nimport Item from './item';\n\nimport '../css/list.css';\n\nconst ROW_HEIGHT = 60;\nconst OVERSCAN_ROWS = 5;\n\nclass List extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibleStartIndex: 0,\n      visibleEndIndex: 0,\n      overscanStartIndex: 0,\n      overscanEndIndex: 0\n    };\n    this.list = Array.from(Array(1000)).map((item, index) => `item-${index}`);\n  }\n\n  componentDidMount() {\n    let viewportHeight = this.viewport.offsetHeight;\n    let visibleRowsCount = Math.ceil(viewportHeight / ROW_HEIGHT);\n    let visibleStartIndex = 0;\n    let visibleEndIndex = visibleRowsCount;\n    let overscanStartIndex = 0;\n    let overscanEndIndex = visibleEndIndex + OVERSCAN_ROWS;\n    this.setState({\n      visibleStartIndex,\n      visibleEndIndex,\n      overscanStartIndex,\n      overscanEndIndex\n    });\n  }\n\n  onScroll = (evt) => {\n    let scrollTop = evt.target.scrollTop;\n    let viewportHeight = this.viewport.offsetHeight;\n    let rowsCount = this.list.length;\n    let { visibleStartIndex, visibleEndIndex } = this.getVisibleBoundaries(viewportHeight, scrollTop, rowsCount);\n    let overscanStartIndex = this.getOverscanStartIdx(visibleStartIndex);\n    let overscanEndIndex = this.getOverscanEndIdx(visibleEndIndex, rowsCount);\n    this.setState({\n      visibleStartIndex,\n      visibleEndIndex,\n      overscanStartIndex,\n      overscanEndIndex\n    });\n  }\n\n  getVisibleBoundaries = (viewportHeight, scrollTop, rowsCount) => {\n    let renderedRowsCount = Math.ceil(viewportHeight / ROW_HEIGHT);\n    let visibleStartIndex = Math.max(0, Math.round(scrollTop / ROW_HEIGHT));\n    let visibleEndIndex = Math.min(rowsCount, visibleStartIndex + renderedRowsCount);\n    return { visibleStartIndex, visibleEndIndex }\n  }\n\n  getOverscanStartIdx = (visibleStartIndex) => {\n    return Math.max(0, Math.floor(visibleStartIndex / 10) * 10 - OVERSCAN_ROWS);\n  }\n\n  getOverscanEndIdx = (visibleEndIndex, rowsCount) => {\n    return Math.min(rowsCount, Math.ceil(visibleEndIndex / 10) * 10 + OVERSCAN_ROWS);\n  }\n\n  getRenderRows = () => {\n    if (!this.list) return [];\n    let { overscanStartIndex, overscanEndIndex } = this.state;\n    let i = overscanStartIndex;\n    let renderRows = [];\n    while (i < overscanEndIndex) {\n      renderRows.push(this.list[i]);\n      i++;\n    }\n    return renderRows;\n  }\n\n  render() {\n    let { overscanStartIndex, overscanEndIndex } = this.state;\n    let renderRows = this.getRenderRows();\n    let startOffset = overscanStartIndex * ROW_HEIGHT;\n    let endOffset = (this.list.length - overscanEndIndex) * ROW_HEIGHT;\n    return (\n      <div className=\"list-wrapper\">\n        <div className=\"list-container\">\n          <div className=\"list\" ref={ref => this.viewport = ref} onScroll={this.onScroll}>\n            <div style={{paddingTop: startOffset, paddingBottom: endOffset}}>\n              {renderRows.map((item, index) => (\n                <Item key={`item-${index}`} height={ROW_HEIGHT} value={item} />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;","import React from 'react';\nimport List from './components/list';\n\nimport './css/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}